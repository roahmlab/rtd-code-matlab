classdef BernsteinArmTrajectory < rtd.trajectory.Trajectory
% 5th Degree Bernstein Polynomial Trajectory for arm robots
%
% This trajectory is a 5th degree Bernstein polynomial trajectory for
% arm robots. It is parameterized by the start state, the horizon time,
% and the desired final position. The trajectory is generated by
% calculating the 5th degree Bernstein polynomial coefficients for the
% start and end positions, and then using those coefficients to generate
% the trajectory.
%
% The trajectory is parameterized by the following:
%   startState: The start state of the trajectory. This is used to
%       specify the initial position, velocity, and acceleration of the trajectory.
%   horizonTime: The time at which the trajectory should end. This is
%       used to specify the duration of the trajectory.
%   params: The desired final position of the trajectory relative to the start position.
%       This is used to specify the final position of the trajectory. The relative position
%       can also be scaled, which then paramScale is used to scale it back to the
%       desired position.
%
% --- More Info ---
% Author: Adam Li (adamli@umich.edu)
% Written: 2022-10-14
% Updated: 2023-09-12 (Adam Li)
%
% See also: rtd.trajectory.Trajectory, armour.trajectory.ArmTrajectoryFactory,
% rtd.entity.states.ArmRobotStateInstance
%
% --- More Info ---
%

    % Required properties
    properties (Constant)
        % True as this trajectory supports getting commands for a time vector
        vectorized = true
    end

    % Additional properties
    properties
        % The initial state of the trajectory. These are initial parameters
        % from the robot used to calculate the desired bernstein coefficients
        startState(1,1) rtd.entity.states.ArmRobotStateInstance

        % The duration of the trajectory, after which the trajectory will
        % hold the final position
        horizonTime(1,1) double

        % Extra properties to scale the parameters
        paramScale rtd.util.RangeScaler = rtd.util.RangeScaler.empty()

        % The number of parameters for the trajectory
        numParams(1,1) uint32
    end

    % Internal properties
    properties (SetAccess=private)
        % the alpha coefficients for the bernstein polynomial
        alpha(:,6) double

        % The calculated final position of the trajectory
        q_end(:,1) double
    end

    methods
        function self = BernsteinArmTrajectory(startState, horizonTime, numParams)
            % Constructor for the BernsteinArmTrajectory
            %
            % Arguments:
            %   startState: The start state of the trajectory. This is used to
            %       specify the initial position, velocity, and acceleration of the trajectory.
            %   horizonTime: The time at which the trajectory should end. This is
            %       used to specify the duration of the trajectory.
            %   numParams: The number of parameters for the trajectory. This is
            %       used to specify the number of parameters for the trajectory.
            %
            arguments
                startState(1,1) rtd.entity.states.ArmRobotStateInstance
                horizonTime(1,1) double
                numParams(1,1) uint32
            end
            
            self.startState = startState;
            self.horizonTime = horizonTime;
            self.numParams = numParams;
        end

        function setParamScale(self, paramScale)
            % Sets the parameter scaling
            %
            % Arguments:
            %   paramScale (rtd.util.RangeScaler): The parameter scaling to use.
            %       This is used to scale the relative position to the desired
            %       position. If not provided, then paramScale is reset to empty.
            %
            arguments
                self armour.trajectory.BernsteinArmTrajectory
                paramScale(:,1) rtd.util.RangeScaler = []
            end

            if length(paramScale) > 1
                error('Can only set one paramScale value!');
            end
            self.paramScale = paramScale;
        end
        
        function setParameters(self, trajectoryParams, options)
            % Sets the parameters for the trajectory.
            %
            % After setting the parameters, it attempts to internally update the trajectory
            % to reduce long term calculations.
            %
            % Arguments:
            %   trajectoryParams (double): The parameters for the trajectory. This is
            %       used to specify the relative position of the trajectory.
            %       The relative position can also be scaled, which then
            %       paramScale is used to scale it back to the desired position.
            %   options: Keyword arguments. See Below.
            %
            % Keyword Arguments:
            %   startState (rtd.entity.states.ArmRobotStateInstance): The start state of the trajectory. This is used to
            %       specify the initial position, velocity, and acceleration of the trajectory.
            %   horizonTime (double): The time at which the trajectory should end. This is
            %       used to specify the duration of the trajectory.
            %   numParams (double): The number of parameters for the trajectory. This is
            %       used to specify the number of parameters for the trajectory.
            %  paramScale (rtd.util.RangeScaler): The parameter scaling to use.
            %       This is used to scale the relative position to the desired
            %       position.
            %
            arguments
                self armour.trajectory.BernsteinArmTrajectory
                trajectoryParams(1,:) double
                options.startState rtd.entity.states.ArmRobotStateInstance = self.startState
                options.horizonTime(1,1) double = self.horizonTime
                options.numParams(1,1) uint32 = self.numParams
                options.paramScale(:,1) rtd.util.RangeScaler = self.paramScale
            end

            self.trajectoryParams = trajectoryParams;
            self.startState = options.startState;
            self.horizonTime = options.horizonTime;
            self.numParams = options.numParams;
            if length(self.trajectoryParams) > self.numParams
                self.trajectoryParams = self.trajectoryParams(1:self.numParams);
            end
            self.setParamScale(options.paramScale);
            
            % Perform an internal update (compute peak and stopping values)
            self.internalUpdate();
        end
        
        function valid = validate(self, throwOnError)
            % Validates the trajectory parameters.
            %
            % This function ensures that the trajectory parameters are valid and fully
            % specified. If the trajectory parameters are invalid, then it either throws
            % an error or returns false.
            %
            % Arguments:
            %   throwOnError (logical, optional): If true, then throws an error if the
            %       trajectory parameters are invalid. Otherwise, returns false.
            %       Defaults to false.
            %
            % Returns:
            %   valid (logical): True if the trajectory parameters are valid.
            %       False otherwise.
            %
            % Raises:
            %   InvalidTrajectory: If the current trajectory is not valid and
            %       throwOnError is true.
            %
            arguments
                self armour.trajectory.BernsteinArmTrajectory
                throwOnError(1,1) logical = false
            end

            % Make sure everything is nonempty
            valid = not( ...
                isempty(self.trajectoryParams) || ...
                isempty(self.startState));

            % Make sure the trajectory params make sense
            valid = valid && length(self.trajectoryParams) == self.numParams;
            valid = valid && self.numParams == length(self.startState.position);
            
            % Throw if wanted
            if ~valid && throwOnError
                errMsg = MException('BernsteinArmTrajectory:InvalidTrajectory', ...
                    'Called trajectory object does not have complete parameterization!');
                throw(errMsg)
            end
        end
        
        function command = getCommand(self, time)
            % Gets the command for the given time.
            %
            % This function gets the command for the given time. The command is
            % generated by calculating the position, velocity, and acceleration
            % for the given time.
            %
            % Arguments:
            %   time (double): The time to get the command for.
            %
            % Returns:
            %   command (rtd.entity.states.ArmRobotStateInstance): The command for the given time.
            %
            % Raises:
            %   InvalidTrajectory: If the current trajectory is not valid.
            %   InvalidTime: If the time is invalid.
            %
            arguments
                self armour.trajectory.BernsteinArmTrajectory
                time(1,:) double
            end

            % Do a parameter check and time check, and throw if anything is
            % invalid.
            self.validate(true);
            t_shifted = time - self.startTime;
            if any(t_shifted < 0)
                ME = MException('BernsteinArmTrajectory:InvalidTime', ...
                    'Invalid time provided to BernsteinArmTrajectory');
                throw(ME)
            end
            
            % Get a mask for the active trajectory time and the stopped
            % trajectory times.
            t_size = length(t_shifted);
            horizon_mask = t_shifted < self.horizonTime;
            t_masked_scaled = t_shifted(horizon_mask) / self.horizonTime;
            t_masked_size = length(t_masked_scaled);

            % Original implementation adapted
            q_des = zeros(self.numParams, t_masked_size);
            q_dot_des = zeros(self.numParams, t_masked_size);
            q_ddot_des = zeros(self.numParams, t_masked_size);
            
            for j = 1:self.numParams
                for coeff_idx = 0:5
                    q_des(j,:) = q_des(j,:) + ...
                        self.alpha(j,coeff_idx+1) * t_masked_scaled.^coeff_idx;
                    if coeff_idx > 0
                        q_dot_des(j,:) = q_dot_des(j,:) + ...
                            coeff_idx * self.alpha(j,coeff_idx+1) * t_masked_scaled.^(coeff_idx-1);
                    end
                    if coeff_idx > 1
                        q_ddot_des(j,:) = q_ddot_des(j,:) + ...
                            (coeff_idx) * (coeff_idx-1) * self.alpha(j,coeff_idx+1) * t_masked_scaled.^(coeff_idx-2);
                    end
                end
            end
                
            % Alternative vectorized implementation (will need updating)
            %deg = 5;
            %q_des = sum(self.alpha.*(t_masked.^(0:deg)),2);
            %q_dot_des = sum((1:deg).*self.alpha(:,2:end).*(t_masked.^(0:deg-1)),2);
            %q_ddot_des = sum(((2:deg).*(1:deg-1)).*self.alpha(:,3:end).*(t_masked.^(0:deg-2)),2);

            % Move to a combined state variable
            state = zeros(self.numParams*3, t_size);
            pos_idx = 1:self.numParams;
            vel_idx = pos_idx + self.numParams;
            acc_idx = vel_idx + self.numParams;
            state(pos_idx,horizon_mask) = q_des;
            state(vel_idx,horizon_mask) = q_dot_des / self.horizonTime;
            state(acc_idx,horizon_mask) = q_ddot_des / self.horizonTime^2;

            % Update all states times after the horizon time
            state(pos_idx,~horizon_mask) = repmat(self.q_end, 1, t_size-t_masked_size);
            
            % Generate the output.
            command(length(time)) = rtd.entity.states.ArmRobotStateInstance();
            command.setTimes(time);
            command.setStateSpace(state, ...
                position_idxs=pos_idx, ...
                velocity_idxs=vel_idx, ...
                acceleration_idxs=acc_idx);
        end
    end

    % Internal methods for the class
    methods (Access=private)
        function internalUpdate(self)
            % Performs an internal update of the trajectory.
            %
            % This function performs an internal update of the trajectory. This
            % includes calculating the bernstein coefficients and the final position.
            % This function is called automatically when the trajectory parameters
            % are set.
            %

            % internal update if valid. short circuit if not.
            if ~self.validate()
                return
            end
            
            % Get the desired final position
            if isempty(self.paramScale)
                q_goal = self.trajectoryParams;
            else
                q_goal = self.startState.position + self.paramScale.scaleout(self.trajectoryParams);
            end

            self.alpha = zeros(self.numParams, 6);
            for j = 1:self.numParams  % Modified to use matrix instead of cells
                beta = armour.legacy.match_deg5_bernstein_coefficients({...
                    self.startState.position(j); ...
                    self.startState.velocity(j); ...
                    self.startState.acceleration(j); ...
                    q_goal(j); ...
                    0; 0}, self.horizonTime);
                self.alpha(j,:) = cell2mat(armour.legacy.bernstein_to_poly(beta, 5));
            end
            
            % Precompute end position
            % Adapted Original
            % End position should actually just be q_goal
            %self.q_end = zeros(self.n_q, 1);
            %for j = 1:n_q
            %    for coeff_idx = 0:5
            %        self.q_end(j) = self.q_end(j) + ...
            %            self.alpha(j,coeff_idx+1) * self.trajOptProps.horizonTime^coeff_idx;
            %    end
            %end
            
            self.q_end = q_goal;
            self.startTime = self.startState.time;
        end
    end
end